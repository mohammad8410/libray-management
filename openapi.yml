openapi: 3.0.3
info:
  description: "librarian would be able to manage books, visitors would book various books, also there would be stock management, notifications to return books, etc."
  version: "1.0.0"
  title: "Library Management System"
tags:
  - name: "Book"
    description: "Access and operations about books"
  - name: "Auth"
    description: "Access and operations about Authentication and Authorization"
  - name: "User"
    description: "Access and operations about users"
  - name: "UserScore"
    description: "Access and operations about user scores"
servers:
  - url: https://localhost:8000
paths:
  /books:
    get:
      tags:
        - Book
      description: get books information
      parameters:
        - in: query
          name: search
          description: search in all fields of the books
          required: false
          schema:
            type: string
            nullable: false
        - in: query
          name: per_page
          description: show items based on per_page
          required: false
          schema:
            type: integer
            nullable: false
        - in: query
          name: page
          description: page number
          required: false
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: list of books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
    post:
      tags:
        - Book
      description: add a book record(only for admins)
      requestBody:
        $ref: "#/components/requestBodies/CreateBookRequestBodyJson"
      responses:
        201:
          description: book record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        422:
          $ref: "#/components/responses/ValidationError"

  /books/{id}:
    get:
      tags:
        - Book
      description: show a book record
      parameters:
        - in: query
          name: id
          description: book's id
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: book response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Book
      description: edit a book record(only for admins)
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
      requestBody:
        $ref: "#/components/requestBodies/UpdateBookRequestBodyJson"
      responses:
        200:
          description: book record updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Book
      description: delete a book record(only for admins)
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: book record deleted successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

  /books/{id}/inc/{num}:
    post:
      tags:
        - Book
      description: increase number of a book(only for admins)
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
        - in: query
          name: num
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: books number increased.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

  /books/{id}/dec/{num}:
    post:
      tags:
        - Book
      description: decrease number of a book(only for admins)
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
        - in: query
          name: num
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: books number decreased.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        406:
          $ref: "#/components/responses/NotAcceptable"

  /books/{id}/borrow:
    post:
      tags:
        - Book
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: book is taken by the user successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        406:
          $ref: "#/components/responses/NotAcceptable"

  /books/{id}/return:
    post:
      tags:
        - Book
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: book is returned by the user successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        406:
          $ref: "#/components/responses/NotAcceptable"

  /register:
    post:
      tags:
        - Auth
      requestBody:
        $ref: "#/components/requestBodies/UserRegisterRequestBodyJson"
      responses:
        204:
          description: user registered successfully.
        422:
          $ref: "#/components/responses/ValidationError"

  /login:
    post:
      tags:
        - Auth
      requestBody:
        $ref: "#/components/requestBodies/UserLoginRequestBodyJson"
      responses:
        204:
          description: user logged in successfully.
        422:
          $ref: "#/components/responses/ValidationError"

  /logout:
    post:
      tags:
        - Auth
      responses:
        204:
          description: user logged out successfully.
        401:
          $ref: "#/components/responses/Unauthenticated"

  /forgot-password:
    post:
      tags:
        - Auth
      requestBody:
        $ref: "#/components/requestBodies/UserForgotPasswordRequestBodyJson"
      responses:
        200:
          description: reset password link sent successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        422:
          $ref: "#/components/responses/ValidationError"

  /password-reset:
    post:
      tags:
        - Auth
      requestBody:
        $ref: "#/components/requestBodies/UserPasswordResetRequestBodyJson"
      responses:
        200:
          description: password reset successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        422:
          $ref: "#/components/responses/ValidationError"

  /verify-email/{id}/{hash}:
    get:
      tags:
        - Auth
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
        - in: query
          name: hash
          required: true
          schema:
            type: string
            nullable: false
      responses:
        200:
          description: email verified successfully.
        204:
          description: user has verified email.
        403:
          $ref: "#/components/responses/Unauthorized"

  /email/verification-notification:
    post:
      tags:
        - Auth
      responses:
        200:
          description: verification link sent to authenticated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        204:
          description: user has verified email.
        401:
          $ref: "#/components/responses/Unauthenticated"

  /users:
    get:
      tags:
        - User
      description: list of users(only for admins)
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: info of user
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/UserResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - User
      description: update user information
      requestBody:
          $ref: "#/components/requestBodies/UserUpdateRequestBodyJson"
      responses:
        200:
          description: user information updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - User
      responses:
        204:
          description: user deleted successfully.
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"

  /user-scores:
    get:
      tags:
        - UserScore
      description: list of user scores(only for admins)
      parameters:
        - in: query
          name: sort
          required: false
          schema:
            type: boolean
            nullable: true
        - in: query
          name: per_page
          required: false
          schema:
            type: integer
            nullable: false
        - in: query
          name: page
          required: false
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: show all user scores
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserScoreResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"

  /user-scores/{userScore}:
    get:
      tags:
        - UserScore
      description: show user score
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        200:
          description: show user score.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserScoreResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - UserScore
      description: update user score(only for admins)
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            nullable: false
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserScoreRequestBodyJson"
      responses:
        200:
          description: user score updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserScoreResponse"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"

#  /userscore/{id}/inc:
#    post:
#      tags:
#        - UserScore
#      parameters:
#        - in: query
#          name: id
#          required: true
#          schema:
#            type: integer
#            nullable: false
#      responses:
#        200:
#          description: user score increased successfully.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/UserScoreResponse"
#        403:
#          $ref: "#/components/responses/Unauthorized"
#        404:
#          $ref: "#/components/responses/NotFound"
#
#  /userscore/{id}/dec:
#    post:
#      tags:
#        - UserScore
#      parameters:
#        - in: query
#          name: id
#          required: true
#          schema:
#            type: integer
#            nullable: false
#      responses:
#        200:
#          description: user score decreased successfully.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/UserScoreResponse"
#        403:
#          $ref: "#/components/responses/Unauthorized"
#        404:
#          $ref: "#/components/responses/NotFound"
#        406:
#          $ref: "#/components/responses/NotAcceptable"




components:
  schemas:
    Message:
      type: object
      properties:
        message:
          description: message text
          type: string
    Pagination:
      properties:
        links:
          $ref: "#/components/schemas/PaginationLinks"
        data:
          type: array
          items: {}
        meta:
          $ref: "#/components/schemas/PaginationMeta"
    PaginationLinks:
      type: object
      properties:
        first:
          type: string
        last:
          type: string
        prev:
          type: string
          nullable: true
        next:
          type: string
          nullable: true
    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
        from:
          type: integer
          nullable: true
        last_page:
          type: integer
        links:
          type: array
          items: {}
        path:
          type: string
        per_page:
          type: integer
        to:
          type: integer
          nullable: true
        total:
          type: integer
    BookResponse:
      type: object
      properties:
        id:
          description: book's id
          type: integer
          nullable: false
        isbn:
          description: book's isbn
          type: string
          nullable: false
        maximumTime:
          description: maximum time that user can hold the book
          type: integer
          format: timestamp
          nullable: false
        name:
          description: name of book
          type: string
          nullable: false
        authors:
          description: author(s) of book
          type: array
          nullable: false
          items: {}
        translators:
          description: translator(s) of book
          type: array
          nullable: true
          items: {}
        year:
          description: publication year
          type: integer
          nullable: false
        volume:
          description: volume of book
          type: integer
          nullable: false
        pages:
          description: number of book's pages
          type: integer
          nullable: false
        price:
          description: price of book
          type: integer
          nullable: false
        number:
          description: number of this books in the library
          type: integer
          nullable: false
        created_at:
          description: book record creation time
          type: integer
          format: timestamp
          nullable: false
        updated_at:
          description: book record edition time
          type: integer
          format: timestamp
          nullable: false
        deleted_at:
          description: book record soft deletion time
          type: integer
          format: timestamp
          nullable: true
    UpdateUserScoreRequestBody:
      type: object
      properties:
        newScore:
          type: integer
          nullable: false
    CreateBookRequestBody:
      type: object
      properties:
        isbn:
          description: book's isbn
          type: string
          nullable: false
        maximumTime:
          description: maximum time that user can hold the book
          type: integer
          format: timestamp
          nullable: false
        name:
          type: string
          nullable: false
        authors:
          type: array
          nullable: false
          items: {}
        translators:
          type: array
          nullable: true
          items: {}
        year:
          type: integer
          nullable: false
        volume:
          type: integer
          nullable: false
        pages:
          type: integer
          nullable: false
        price:
          type: integer
          nullable: false
      required:
        - isbn
        - maximumTime
        - name
        - authors
        - translators
        - year
        - volume
        - pages
        - price
    UpdateBookRequestBody:
      type: object
      properties:
        isbn:
          description: book's isbn
          type: string
          nullable: false
        maximumTime:
          description: maximum time that user can hold the book
          type: integer
          format: timestamp
          nullable: false
        name:
          type: string
          nullable: false
        authors:
          type: array
          nullable: false
          items: {}
        translators:
          type: array
          nullable: true
          items: {}
        year:
          type: integer
          nullable: false
        volume:
          type: integer
          nullable: false
        pages:
          type: integer
          nullable: false
        price:
          type: integer
          nullable: false
      required:
        - name
        - authors
        - translators
        - year
        - volume
        - pages
        - price
    UserRegisterRequestBody:
      type: object
      properties:
        name:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
        password_confirmation:
          type: string
          nullable: false
    UserLoginRequestBody:
      type: object
      properties:
        email:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
    UserForgotPasswordRequestBody:
      type: object
      properties:
        email:
          type: string
          nullable: false
    UserPasswordResetRequestBody:
      type: object
      properties:
        token:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          nullable: false
        name:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
    UserScoreResponse:
      type: object
      properties:
        score:
          type: integer
          nullable: false
        user_id:
          type: integer
          nullable: false
    UserUpdateRequestBody:
      type: object
      properties:
        name:
          type: string
          nullable: false
  responses:
    Unauthorized:
      description: user is not authorized for this action.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    Unauthenticated:
      description: user is not authenticated.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    NotFound:
      description: resource is not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    ValidationError:
      description: invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
    NotAcceptable:
      description: request is not acceptable.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"
  requestBodies:
    UpdateUserScoreRequestBodyJson:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateUserScoreRequestBody"
    CreateBookRequestBodyJson:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateBookRequestBody"
    UpdateBookRequestBodyJson:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateBookRequestBody"
    UserRegisterRequestBodyJson:
      description: user registration
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserRegisterRequestBody"
    UserLoginRequestBodyJson:
      description: login user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserLoginRequestBody"
    UserForgotPasswordRequestBodyJson:
      description: forgot password
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserForgotPasswordRequestBody"
    UserPasswordResetRequestBodyJson:
      description: Password Reset
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserPasswordResetRequestBody"
    UserUpdateRequestBodyJson:
      description: user information update
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserUpdateRequestBody"







